from mrjob.job import MRJob
import numpy as np
#-------------------------------------------------------------------------
'''
    Problem 4: 
    In this problem, you will use mapreduce framework to implement matrix multipication. 
    You could test the correctness of your code by typing `nosetests test4.py` in the terminal.
'''

#--------------------------
class MatMul(MRJob):
#--------------------------
    ''' 
        Given a matrix A and a matrix B, compute the product A*B = C
    '''

    #----------------------
    @staticmethod
    def parse_line(line):
        '''
            parse one line of text from the data file.
            Input:
                    line: one line of text of a data record
            return: 
                    matrix_name: 'A' or 'B' 
                    i: row index, an integer (note, the index starts from 1) 
                    j: column index (note, the index starts from 1) 
                    v: the value of the entry; 
                    nr: number of rows in the matrix C
                    nc: number of columns in the matrix C
        '''
        #########################################
        ## INSERT YOUR CODE HERE
        line = line.split(",")
        matrix_name = line[0]
        i = int(line[1])
        j = int(line[2])
        v = float(line[3])
        nr= int(line[4])
        nc= int(line[5]) 

        #########################################
        return matrix_name, i,j,v, nr, nc

    #----------------------
    def mapper(self, in_key, in_value):
        ''' 
            mapper function, which process a key-value pair in the data and generate intermediate key-value pair(s)
            Input:
                    in_key: the key of a data record (in this example, can be ignored)
                    in_value: the value of a data record, (in this example, it is a line of text string in the data file, check 'matrix.csv' for example)
            Yield: 
                    (out_key, out_value) :intermediate key-value pair(s). You need to design the format and meaning of the key-value pairs. These intermediate key-value pairs will be feed to reducers, after grouping all the values with a same key into a value list.
        '''
        
        # parse one line of text data
        matrix_name,  i,j,v, nr, nc = self.parse_line(in_value)

        #########################################
        ## INSERT YOUR CODE HERE
        if matrix_name == 'A':
        	for c in range(1,nc+1):
        		out_key = ('C',i,c)
        		out_value = (matrix_name,i,j,v)
        		yield(out_key,out_value)
       			
        if matrix_name == 'B':
        	for r in range(1,nr+1):
        		out_key = ('C',r,j)
        		out_value = (matrix_name,i,j,v)
        		yield(out_key,out_value)
        		
        # generate output key-value pairs 
        





        #########################################

    #----------------------
    def reducer(self, in_key, in_values):
        ''' 
            reducer function, which processes a key and value list and produces output key-value pair(s)
            Input:
                    in_key: an intermediate key from the mapper
                    in_values: a list (generator) of values , which contains all the intermediate values with the same key (in_key) generated by all mappers
            Yield: 
                    (out_key, out_value) : output key-value pair(s). 
        '''
        #########################################
        ## INSERT YOUR CODE HERE
        out_key = in_key
        values = list(in_values)
        lenth = int(len(values)/2)
        a = [0 for n in range(lenth)]
        b = [0 for n in range(lenth)]
        v = 0
        for x in range(len(values)):
        	if values[x][0] == 'A':
        		a[values[x][2]-1] = values[x][3]
        	if values[x][0] == 'B':
        		b[values[x][1]-1] = values[x][3]
        
        for y in range(len(a)):
        	v = v+ a[y]*b[y]
       	
       	yield out_key,v

        #########################################

